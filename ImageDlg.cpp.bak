//
// MySETIviewer, a set tools for decoding bitstreams into various formats and manipulating those files
// ImageDlg.cpp
// (C) 2023, Mark Stegall
// Author: Mark Stegall
//
// This file is part of MySETIviewer.
//
// MySETIviewer is free software : you can redistribute it and /or modify it under
// the terms of the GNU General Public License as published by the Free Software Foundation,
// either version 3 of the License, or (at your option) any later version.
//
// MySETIviewer is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with MySETIapp.
// If not, see < https://www.gnu.org/licenses/>. x
// 
// This file contains the dialog callback procedures for the image dialog
// 
// V0.1.0.1 2023-11-27  Initial Pre Release
//
// This handles all the actual display of the bitmap generated
//
// todo: implement using Direct2D
//
#include "framework.h"
#include "resource.h"
#include <shobjidl.h>
#include <winver.h>
#include <vector>
#include <atlstr.h>
#include <strsafe.h>
#include <shellapi.h>
#include <d2d1.h>
#include <d2d1_1.h>
#pragma comment(lib, "d2d1.lib")
#include "globals.h"
#include "AppFunctions.h"
#include "ImageDlg.h"

static ImageDialog ID;

//*******************************************************************************
//
// Message handler for ImageDlg dialog box.
// This window is used to display an image or BMP file
// It is a modeless dialog.
// 
//*******************************************************************************
INT_PTR CALLBACK ImageDlg(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
    //    UNREFERENCED_PARAMETER(lParam);
    switch (message)
    {

    case WM_INITDIALOG:
    {
        ID.InitializeDirect2D();
        CString csString = L"ImageWindow";
        RestoreWindowPlacement(hDlg, csString);
        return (INT_PTR)TRUE;
    }

    case WM_COMMAND:
        switch (LOWORD(wParam)) {

        case IDCANCEL:
            if (!DisplayResults) {
                DestroyWindow(hwndImage);
                hwndImage = NULL;
            }
            else {
                ShowWindow(hwndImage, SW_HIDE);
            }
            return (INT_PTR)TRUE;

        case IDC_GENERATE_BMP:
        {
            int xsize, ysize;
            COLORREF* Image;
            Displays->GetDisplay(&Image, &xsize, &ysize);
            
            if (ID.LoadCOLORREFimage(hwndImage, xsize, xsize,Image)) {
                InvalidateRect(hDlg, nullptr, TRUE);
            }
            return (INT_PTR)TRUE;
        }

        default:
            return (INT_PTR)FALSE;
        } // end of WM_COMMAND

    case WM_PAINT:
    {
        if (ID.Repaint()) {
            return (INT_PTR)TRUE;
        }
        break;
    }

    case WM_WINDOWPOSCHANGING:
    {
        WINDOWPOS* wpos = (WINDOWPOS*)lParam;
        float AspectRatio;
        int x, y;

        if (Displays && Displays->GetSize(&x, &y)) {
            AspectRatio = (float)x / (float)y;
            wpos->cy = (int)((float)wpos->cx / AspectRatio);
        }
        else {
            // don't sohw window is ther is nothing to show
            wpos->flags &= ~SWP_SHOWWINDOW;
        }
        return 0;
    }

    case WM_MOUSEWHEEL:
    {
        ID.Rescale(GET_WHEEL_DELTA_WPARAM(wParam));
        InvalidateRect(hDlg, nullptr, TRUE);
        break;
    }

    case WM_MOUSEMOVE:
    {
        if (ID.PanImage(LOWORD(lParam), HIWORD(lParam))) {
            InvalidateRect(hDlg, nullptr, TRUE);
        }
        break;
    }

    case WM_LBUTTONDOWN:
        ID.EnablePanning(TRUE);
        SetCapture(hDlg); // Capture the mouse input to receive WM_MOUSEMOVE even if the mouse is outside the window
        break;

    case WM_LBUTTONUP:
        ID.EnablePanning(FALSE);
        ReleaseCapture(); // Release the mouse input capture
        break;

    case WM_DESTROY:
    {
        // save window position/size data
        CString csString = L"ImageWindow";
        SaveWindowPlacement(hDlg, csString);

        // release Direct2D
        ID.ReleaseDirect2D();
        hwndImage = NULL;
        break;
    }

    }
    return (INT_PTR)FALSE;
}

//*******************************************************************************
//
// 
// 
//*******************************************************************************
int ImageDialog::InitializeDirect2D(void)
{
    HRESULT hResult;
    hResult = D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, &pFactory);
    if (FAILED(hResult)) {
        return APPERR_MEMALLOC;
    }
    return APP_SUCCESS;
}

//*******************************************************************************
//
// 
// 
//*******************************************************************************
void ImageDialog::ReleaseDirect2D(void)
{
    // release resources
    if (pBitmap) {
        pBitmap->Release();
        pBitmap = nullptr;
    }

    if (pRenderTarget) {
        pRenderTarget->Release();
        pRenderTarget = nullptr;
    }

    // factory is last
    if (pFactory) {
        pFactory->Release();
        pFactory = nullptr;
    }
    return ;
}

//*******************************************************************************
//
// 
// 
//*******************************************************************************
void ImageDialog::Rescale(int Delta)
{
    scaleFactor += (Delta > 0) ? 0.1f : -0.1f;
    scaleFactor = max(0.5f, min(10.0f, scaleFactor));
}

//*******************************************************************************
//
// 
// 
//*******************************************************************************
BOOL ImageDialog::Repaint()
{
    // only do this if target exists
    if (pRenderTarget) {
        pRenderTarget->BeginDraw();
        pRenderTarget->SetTransform(D2D1::Matrix3x2F::Scale(scaleFactor, scaleFactor,
                                    D2D1::Point2F(panOffset.x, panOffset.y)));
        pRenderTarget->Clear(D2D1::ColorF(D2D1::ColorF::GhostWhite));
        D2D1_SIZE_F RectSize = pRenderTarget->GetSize();
        D2D1_RECT_F Rectf = D2D1::RectF(0.0f,0.0f,RectSize.width,RectSize.height);
        pRenderTarget->DrawBitmap(pBitmap, Rectf, 1.0f, D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR);
        pRenderTarget->EndDraw();
        return TRUE;
    }
    return FALSE;
}

//*******************************************************************************
//
// 
// 
//*******************************************************************************
BOOL ImageDialog::LoadCOLORREFimage(HWND hWnd, int xsize, int ysize, COLORREF* Image)
{
    // delete old data first
    if (pBitmap) {
        pBitmap->Release();
        pBitmap = nullptr;
    }

    if (pRenderTarget) {
        pRenderTarget->Release();
        pRenderTarget = nullptr;
    }

    // create render target
    pFactory->CreateHwndRenderTarget(
        D2D1::RenderTargetProperties(),
        D2D1::HwndRenderTargetProperties(hWnd, D2D1::SizeU(xsize, ysize)),
        &pRenderTarget
    );

    if (pRenderTarget) {
        bitmapProperties.pixelFormat = D2D1::PixelFormat(DXGI_FORMAT_R8G8B8A8_UNORM,
                                                         D2D1_ALPHA_MODE_IGNORE);
        HRESULT hRes = pRenderTarget->CreateBitmap(D2D1::SizeU(xsize, ysize), Image,
                                    xsize * sizeof(COLORREF),
                                    bitmapProperties, &pBitmap);
        if (FAILED(hRes)) {
            if (pBitmap) {
                pBitmap->Release();
                pBitmap = nullptr;
            }
            return FALSE;
        }
        if (pBitmap) {
            return TRUE;
        }
    }
    return FALSE;
}

//*******************************************************************************
//
// 
// 
//*******************************************************************************
BOOL ImageDialog::PanImage(int x, int y)
{
    if (isPanning) {
        float deltaX = static_cast<float>(x - lastMousePos.x) / scaleFactor;
        float deltaY = static_cast<float>(y - lastMousePos.y) / scaleFactor;
        panOffset.x -= deltaX;
        panOffset.y -= deltaY;
    }

    lastMousePos.x = x;
    lastMousePos.y = y;
    return isPanning;
}

//*******************************************************************************
//
// 
// 
//*******************************************************************************
void ImageDialog::EnablePanning(BOOL Enable)
{
    isPanning = Enable;
    return;
}

//*******************************************************************************
//
// 
// 
//*******************************************************************************
void ImageDialog::ReleaseBitmapRender(void)
{
    if (pBitmap) {
        pBitmap->Release();
        pBitmap = nullptr;
    }
    if (pRenderTarget) {
        pRenderTarget->Release();
        pRenderTarget = nullptr;
    }
    return;
}
